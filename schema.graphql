type ProtocolMetrics @entity {
  id: ID! # "protocol"
  totalPositions: BigInt!
  totalUsers: BigInt!
  fullOrdersUSD: BigDecimal!
  partialOrdersUSD: BigDecimal!
  collaterals: [ProtocolCollateral!]! @derivedFrom(field: "protocol")
  debts: [ProtocolDebt!]! @derivedFrom(field: "protocol")
  lastUpdatedAt: BigInt!
}

type ProtocolCollateral @entity {
  id: ID! # "protocol-collateral"
  protocol: ProtocolMetrics!
  token: Token!
  amount: BigDecimal!
  lastUpdatedAt: BigInt!
}

type ProtocolDebt @entity {
  id: ID! # "protocol-debt"
  protocol: ProtocolMetrics!
  token: Token!
  amount: BigDecimal!
  lastUpdatedAt: BigInt!
}

type User @entity {
  id: ID! # User address
  nonce: BigInt! # Current nonce
  totalPositions: BigInt!
  totalOrdersExecuted: BigInt!
  totalVolumeUSD: BigDecimal!
  lastUpdatedAt: BigInt! # Last update timestamp
}

type DebtPosition @entity {
  id: ID! # Debt contract address
  owner: Bytes! # Current owner
  nonce: BigInt! # Current nonce
  # Collateral tracking (detailed breakdown)
  collaterals: [PositionCollateral!]! @derivedFrom(field: "position")
  # Debt tracking (detailed breakdown)
  debts: [PositionDebt!]! @derivedFrom(field: "position")

  # Timestamps
  createdAt: BigInt!
  lastUpdatedAt: BigInt!
}

type PositionCollateral @entity {
  id: ID! # position-token
  position: DebtPosition!
  token: Token!
  amount: BigDecimal! # Amount of collateral
  lastUpdatedAt: BigInt!
}

type PositionDebt @entity {
  id: ID! # position-token-ratemode
  position: DebtPosition!
  token: Token!
  amount: BigDecimal! # Amount of debt
  interestRateMode: BigInt! # 1 = stable, 2 = variable
  lastUpdatedAt: BigInt!
}

# Order entity removed - orders are created off-chain with signatures

type FullOrderExecution @entity {
  id: ID! # Transaction hash
  titleHash: Bytes! # Title hash
  buyer: Bytes! # Order executor
  usdValue: BigDecimal! # Base value of the order
  # Performance metrics
  blockTimestamp: BigInt! # Block timestamp
  blockNumber: BigInt! # Block number
}

type PartialOrderExecution @entity {
  id: ID! # Transaction hash
  titleHash: Bytes! # Title hash
  buyer: Bytes! # Order executor
  usdValue: BigDecimal! # Base value of the order
  # Performance metrics
  blockTimestamp: BigInt! # Block timestamp
  blockNumber: BigInt! # Block number
}

type CancelledOrder @entity {
  id: ID! # Title hash
  titleHash: Bytes! # Title hash
  cancelledAt: BigInt! # Block timestamp
}

# Consolidated Token entity combining TokenPrice and Token functionality
type Token @entity {
  id: ID! # Token address
  symbol: String! # Token symbol
  decimals: Int! # Token decimals
  priceUSD: BigDecimal! # Current price in USD
  lastUpdatedAt: BigInt! # Last update timestamp
  # Oracle tracking
  oracleSource: String! # Oracle contract address providing the price
  # Historical tracking
  priceHistory: [PriceSnapshot!]! @derivedFrom(field: "token")
}

type PriceSnapshot @entity {
  id: ID! # token-timestamp
  token: Token! # Token reference
  priceUSD: BigDecimal! # Price at snapshot
  timestamp: BigInt! # Snapshot time
  blockNumber: BigInt! # Block number
}

# Asset to Oracle mapping for dynamic price tracking
type AssetOracleMapping @entity {
  id: ID! # Asset address
  asset: Bytes! # Token/asset address
  oracle: Bytes! # Chainlink oracle address providing price
  isActive: Boolean! # Whether mapping is currently active
  createdAt: BigInt! # When mapping was first set
  lastUpdatedAt: BigInt! # Last time mapping was updated
}

# Oracle to Asset reverse mapping for efficient lookup
type OracleAssetMapping @entity {
  id: ID! # Oracle address
  oracle: Bytes! # Chainlink oracle address
  asset: Bytes! # Token/asset address being priced
  isActive: Boolean! # Whether mapping is currently active
  createdAt: BigInt! # When mapping was first set
  lastUpdatedAt: BigInt! # Last time mapping was updated
}

# Dynamic Asset Configuration from Aave Events
type AssetConfiguration @entity {
  id: ID! # Asset address
  asset: Bytes! # Token/asset address
  symbol: String! # Token symbol for easy reference
  # Core configuration from ReserveInitialized
  aToken: Bytes # aToken contract address
  stableDebtToken: Bytes # Stable debt token address
  variableDebtToken: Bytes # Variable debt token address
  interestRateStrategy: Bytes # Interest rate strategy address
  # Risk parameters from CollateralConfigurationChanged
  ltv: BigDecimal! # Loan to value ratio (0-1 scale)
  liquidationThreshold: BigDecimal! # Liquidation threshold (0-1 scale)
  liquidationBonus: BigDecimal! # Liquidation bonus (>1 scale, e.g. 1.05 = 5% bonus)
  # Reserve state flags
  borrowingEnabled: Boolean! # Can be borrowed
  stableRateBorrowingEnabled: Boolean! # Stable rate borrowing enabled
  flashLoanEnabled: Boolean! # Flash loans enabled
  isActive: Boolean! # Reserve is active
  isFrozen: Boolean! # Reserve is frozen
  isPaused: Boolean! # Reserve is paused
  borrowableInIsolation: Boolean! # Can be borrowed in isolation mode
  # Caps and limits
  borrowCap: BigInt! # Maximum borrowable amount
  supplyCap: BigInt! # Maximum suppliable amount
  debtCeiling: BigInt! # Debt ceiling for isolation mode
  # Fees
  reserveFactor: BigInt! # Reserve factor in bps (0-10000)
  liquidationProtocolFee: BigInt! # Liquidation protocol fee in bps
  unbackedMintCap: BigInt! # Unbacked mint cap
  # eMode configuration
  eModeCategory: Int! # Efficiency mode category (0 = not in eMode)
  # Timestamps
  initializedAt: BigInt! # When reserve was first initialized
  lastUpdatedAt: BigInt! # Last configuration update
}

# Historical tracking of configuration changes
type AssetConfigurationHistory @entity {
  id: ID! # asset-block-logIndex
  asset: Bytes! # Asset address
  eventType: String! # Type of event (CollateralConfigurationChanged, ReserveBorrowing, etc.)
  # Changed values (null if not changed in this event)
  ltv: BigDecimal
  liquidationThreshold: BigDecimal
  liquidationBonus: BigDecimal
  borrowingEnabled: Boolean
  stableRateBorrowingEnabled: Boolean
  flashLoanEnabled: Boolean
  isActive: Boolean
  isFrozen: Boolean
  isPaused: Boolean
  borrowCap: BigInt
  supplyCap: BigInt
  reserveFactor: BigInt
  # Event metadata
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}
